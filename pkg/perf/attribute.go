//go:build linux

package perf

import "golang.org/x/sys/unix"

// EventType is the overall type of a performance event.
type EventType uint32

// Supported event types.
const (
	// HardwareEvent type indicates that the event will be monitored using hardware
	// performance counters on the processor. These counters are special registers in
	// the processor that can be used to count the number of times a specific hardware
	// event occurs, such as the number of cache misses or the number of branch mispredictions.
	HardwareEvent EventType = unix.PERF_TYPE_HARDWARE

	// SoftwareEvent type indicates that the event will be monitored using software
	// performance counters. These counters are typically implemented using special
	// instructions in the processor that can be used to count the number of times a
	// specific software event occurs, such as the number of page faults or the number
	// of context switches.
	SoftwareEvent EventType = unix.PERF_TYPE_SOFTWARE

	// TracepointEvent type indicates that the event will be generated by one of the
	// kernel's tracepoints. Tracepoints are special code locations that can be enabled
	// to collect information about kernel activities, such as the execution of a specific
	// system call or the occurrence of a certain type of interrupt. This allows tracepoint
	// events to provide detailed information about the inner workings of the kernel and
	// how it interacts with user-space programs.
	TracepointEvent EventType = unix.PERF_TYPE_TRACEPOINT

	//
	HardwareCacheEvent EventType = unix.PERF_TYPE_HW_CACHE
	RawEvent           EventType = unix.PERF_TYPE_RAW
	BreakpointEvent    EventType = unix.PERF_TYPE_BREAKPOINT
)

type Attribute struct {
	// Label is a human readable name for the event.
	Label string

	// Type is the major type of the event.
	Type EventType

	// Config is the event specific configuration.
	Config uint64
}

func (a Attribute) ToPerfEventAttr() *unix.PerfEventAttr {
	return &unix.PerfEventAttr{
		Type: uint32(a.Type),
	}
}
